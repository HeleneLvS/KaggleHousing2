remove(data_ltz)
newdata<-data_f
newdata$LotFrontageHat<- predict(m.lf,newdata,type="response")
iqr<-IQR(newdata$LotFrontage,na.rm=TRUE)
q3<-quantile(newdata$LotFrontage, probs=c(0.75), na.rm=TRUE)
#Cap it
newdata$LotFrontageHat<-case_when(
newdata$LotFrontageHat >= (q3+3*iqr) ~ (q3+3*iqr),
TRUE ~newdata$LotFrontageHat
)
remove(iqr)
remove(q3)
#Impute it
newdata$LotFrontageF<-case_when(
is.na(newdata$LotFrontage)==TRUE ~ round(newdata$LotFrontageHat,0),
TRUE ~newdata$LotFrontage)
newdata$Cat<-case_when(
is.na(newdata$LotFrontage)==TRUE ~ "Impute",
TRUE ~ "Original")
#Add it back to the dataset we are cleaning
data_f$LotFrontage<-newdata$LotFrontageF
data_f$LotFCat<-newdata$Cat
remove(newdata)
#create_report(data_f)
plot_intro(data_f)
plot_missing(data_f)
xx=data_f$Neighborhood
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point()+
geom_smooth()
#ggplot(data=data_fg, aes(x=xx, y=LotFrontageF))+
#  geom_boxplot()
a<-ggplot(data_f, aes(x=Condition2, y=SalePrice))+
geom_boxplot()
b<-ggplot(data_f, aes(x=Condition2))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
plot_grid(a, b, ncol = 2, nrow = 1)
#ggplot(data=data_f, aes(x=Condition2, fill = HouseStyle, y = 1 ) )+
#  geom_bar(position="fill", stat="identity")
#levels(as.factor(data_fg$HouseStyle))
subset(data_f, Condition1 != "Norm")
#data_fg<-data_f
data_fg<-data_f[,81:82]
##Regroup poorly represented factor levels
#Data_fg will be the set that is used for modelling
#plot_missing(data_f[,1:12])
#data_fg<-data_f
data_fg<-data_f[,81:82]
#Resulting factor changes
data_fg$Era<-as.factor(case_when(data_f$MSSubClass == 20 ~ 'Newer',
data_f$MSSubClass == 60 ~ 'Newer',
data_f$MSSubClass == 120 ~ 'Newer',
data_f$MSSubClass == 160 ~ 'Newer',
data_f$MSSubClass == 30 ~ 'Older',
data_f$MSSubClass == 70 ~ 'Older',
TRUE ~ 'NoAgeDifferentiation'  ))
data_fg$MSZoning<-as.factor(case_when(data_f$MSZoning ==  "C (all)"  ~ "C (all)",
data_f$MSZoning =="FV" ~ "FV",
data_f$MSZoning == "RL" ~ "RL/RP",
data_f$MSZoning == "RP" ~ "RL/RP",
TRUE ~'Other'))
data_fg$MSZoning <-fct_reorder(data_fg$MSZoning, data_fg$SalePrice)
data_fg$LotFrontageF<-data_f$LotFrontage
data_fg$LotArea<-data_f$LotArea
data_fg$Street<-as.factor(data_f$Street)
data_fg$Alley<-as.factor(data_f$Alley)
data_fg$LotShape<-as.factor(case_when(data_f$LotShape == "Reg" ~ "Reg",
TRUE ~ "Irreg"))
data_fg$LandContour<- as.factor(case_when(data_f$LandContour == "HLS" ~ "Other",
data_f$LandContour == "Low" ~ "Other",
TRUE ~ data_f$LandContour))
#Discard Utilities
data_fg$LotConfig <- as.factor(data_f$LotConfig)
data_fg$LandSlope<-as.factor(case_when(data_f$LandSlope == "Gtl" ~ "Gtl",
TRUE ~ "Sloped"))
data_fg$Neighborhood <- as.factor(data_f$Neighborhood)
data_fg$Condition1 <- (case_when(
substring(data_f$Condition1,1,3) == "RRN" ~ "RRN",
substring(data_f$Condition1,1,3) == "RRA" ~ "RRA",
TRUE ~ substring(data_f$Condition1,1,3)
)
)
data_fg$Condition2 <- (case_when(
data_f$Condition2 == "Norm" ~ "Nor",
substring(data_f$Condition2,1,3) == "Pos" ~ "Pos",
TRUE ~ "Neg"
)
)
data_fg$ConComb<-data_fg$Condition1 %+% data_fg$Condition2
str(data_fg)
plot_missing(data_fg)
plot_correlation(data_fg)
####
replace_na(list( BsmtQual = "Non", BsmtExposure = "Non",
BsmtCond= "Non", BsmtFinType1="Non", BsmtFinType2="Non",
FireplaceQu = "Non", GarageType = "Non",GarageFinish = "Non",
GarageQual="Non", GarageCond="Non",
PoolQC="Non", Fence = "None", GarageQual="Non",
GarageCond = "Non", PoolQC = "Non", MiscFeature = "Non")
######
data_fg$Stories<-as.factor(case_when(data_f$HouseStyle == "1Story" ~ "1.0",
k<-ncol(data_fg)
data_fg[,k-2:k]<-lapply(data_fg[,k-2:k],factor)
k<-ncol(data_fg)
data_fg[,k-2:k]<-lapply(data_fg[,k-2:k],factor)
k-2
colS<-names(data_fg[,k-2:k])
colS
data_fg[,colS]<-lapply(data_fg[,colS],factor)
str(data_fg)
colS<-names(data_fg[,(k-2):k])
colS
data_fg[,colS]<-lapply(data_fg[,colS],factor)
str(data_fg)
xx=data_f$BldgType
xx=data_f$BldgType
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point()+
geom_smooth()
#ggplot(data=data_fg, aes(x=xx, y=LotFrontageF))+
#  geom_boxplot()
data_fg$BldgType<-as.factor(data_f$BldgType)
options(scipen=999) ###No scientific notifications
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message =  FALSE)
##clean out the space
rm(list=ls())
options(scipen=999)
##What do we need
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(cowplot) # plot different ggplots next to each other
#install.packages("DataExplorer")
library(DataExplorer)
library(corrplot)
library(pscl) # For Pseudo R squareds on GLMS
#Where will we work
#getwd()
setwd("C:/Users/helen/Documents/Kaggle/HousePrice/KaggleHousing")
train<-read.csv("train.csv")
train['Type']<-'train_set'
test<-read.csv("test.csv")
test['SalePrice'] <- NA
test['Type']<-'test_set'
data<-rbind(train,test)
#create_report(train)
#create_report(data)
plot_intro(data)
plot_missing(data)
#Fill in the NA's where they represent 'None Present' with 'Non'
data_f<-data %>%
replace_na(list(Alley = "Non", BsmtQual = "Non", BsmtExposure = "Non",
BsmtCond= "Non", BsmtFinType1="Non", BsmtFinType2="Non",
FireplaceQu = "Non", GarageType = "Non",GarageFinish = "Non",
GarageQual="Non", GarageCond="Non",
PoolQC="Non", Fence = "None", GarageQual="Non",
GarageCond = "Non", PoolQC = "Non", MiscFeature = "Non"))
data_f<-data_f %>%
replace_na(list(GarageYrBlt = 3000))
## Add this bit for another set: LotFrontage = 0, if the above gives a poor result
## Predict the LotFrontage based on total sqft and Configuration of the lot with m.lf
data_ltz<-subset(data_f, is.na(LotFrontage)==FALSE)
m.lf <- glm(LotFrontage~LotArea+LotConfig, Gamma(link="log"), data = data_ltz)
remove(data_ltz)
newdata<-data_f
newdata$LotFrontageHat<- predict(m.lf,newdata,type="response")
iqr<-IQR(newdata$LotFrontage,na.rm=TRUE)
q3<-quantile(newdata$LotFrontage, probs=c(0.75), na.rm=TRUE)
#Cap it
newdata$LotFrontageHat<-case_when(
newdata$LotFrontageHat >= (q3+3*iqr) ~ (q3+3*iqr),
TRUE ~newdata$LotFrontageHat
)
remove(iqr)
remove(q3)
#Impute it
newdata$LotFrontageF<-case_when(
is.na(newdata$LotFrontage)==TRUE ~ round(newdata$LotFrontageHat,0),
TRUE ~newdata$LotFrontage)
newdata$Cat<-case_when(
is.na(newdata$LotFrontage)==TRUE ~ "Impute",
TRUE ~ "Original")
#Add it back to the dataset we are cleaning
data_f$LotFrontage<-newdata$LotFrontageF
data_f$LotFCat<-newdata$Cat
remove(newdata)
#create_report(data_f)
plot_intro(data_f)
plot_missing(data_f)
xx=data_f$BldgType
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point()+
geom_smooth()
#ggplot(data=data_fg, aes(x=xx, y=LotFrontageF))+
#  geom_boxplot()
a<-ggplot(data_f, aes(x=Condition2, y=SalePrice))+
geom_boxplot()
b<-ggplot(data_f, aes(x=Condition2))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
plot_grid(a, b, ncol = 2, nrow = 1)
#ggplot(data=data_f, aes(x=Condition2, fill = HouseStyle, y = 1 ) )+
#  geom_bar(position="fill", stat="identity")
#levels(as.factor(data_fg$HouseStyle))
subset(data_f, Condition1 != "Norm")
##Regroup poorly represented factor levels
#Data_fg will be the set that is used for modelling
#plot_missing(data_f[,1:12])
#data_fg<-data_f
data_fg<-data_f[,81:82]
#Resulting factor changes
data_fg$Era<-as.factor(case_when(data_f$MSSubClass == 20 ~ 'Newer',
data_f$MSSubClass == 60 ~ 'Newer',
data_f$MSSubClass == 120 ~ 'Newer',
data_f$MSSubClass == 160 ~ 'Newer',
data_f$MSSubClass == 30 ~ 'Older',
data_f$MSSubClass == 70 ~ 'Older',
TRUE ~ 'NoAgeDifferentiation'  ))
data_fg$MSZoning<-as.factor(case_when(data_f$MSZoning ==  "C (all)"  ~ "C (all)",
data_f$MSZoning =="FV" ~ "FV",
data_f$MSZoning == "RL" ~ "RL/RP",
data_f$MSZoning == "RP" ~ "RL/RP",
TRUE ~'Other'))
data_fg$MSZoning <-fct_reorder(data_fg$MSZoning, data_fg$SalePrice)
data_fg$LotFrontageF<-data_f$LotFrontage
data_fg$LotArea<-data_f$LotArea
data_fg$Street<-as.factor(data_f$Street)
data_fg$Alley<-as.factor(data_f$Alley)
data_fg$LotShape<-as.factor(case_when(data_f$LotShape == "Reg" ~ "Reg",
TRUE ~ "Irreg"))
data_fg$LandContour<- as.factor(case_when(data_f$LandContour == "HLS" ~ "Other",
data_f$LandContour == "Low" ~ "Other",
TRUE ~ data_f$LandContour))
#Discard Utilities
data_fg$LotConfig <- as.factor(data_f$LotConfig)
data_fg$LandSlope<-as.factor(case_when(data_f$LandSlope == "Gtl" ~ "Gtl",
TRUE ~ "Sloped"))
data_fg$Neighborhood <- as.factor(data_f$Neighborhood)
data_fg$Condition1 <- (case_when(
substring(data_f$Condition1,1,3) == "RRN" ~ "RRN",
substring(data_f$Condition1,1,3) == "RRA" ~ "RRA",
TRUE ~ substring(data_f$Condition1,1,3)
)
)
data_fg$Condition2 <- (case_when(
data_f$Condition2 == "Norm" ~ "Nor",
substring(data_f$Condition2,1,3) == "Pos" ~ "Pos",
TRUE ~ "Neg"
)
)
data_fg$ConComb<-data_fg$Condition1 %+% data_fg$Condition2
k<-ncol(data_fg)
colS<-names(data_fg[,(k-2):k])
data_fg[,colS]<-lapply(data_fg[,colS],factor)
remove(k)
remove(colS)
data_fg$BldgType<-as.factor(data_f$BldgType)
data_fg$Stories<-as.factor(case_when(data_f$HouseStyle == "1Story" ~ "1.0",
data_f$HouseStyle == "1.5Fin" ~ "1.5",
data_f$HouseStyle =="1.5Unf" ~ "1.5",
data_f$HouseStyle == "2Story" ~ "2.0",
data_f$HouseStyle == "2.5Fin" ~ "2.5",
data_f$HouseStyle == "2.5Unf" ~ "2.5",
TRUE ~ 'Other'  ))
str(data_fg)
plot_missing(data_fg)
plot_correlation(data_fg)
####
replace_na(list( BsmtQual = "Non", BsmtExposure = "Non",
BsmtCond= "Non", BsmtFinType1="Non", BsmtFinType2="Non",
FireplaceQu = "Non", GarageType = "Non",GarageFinish = "Non",
GarageQual="Non", GarageCond="Non",
PoolQC="Non", Fence = "None", GarageQual="Non",
GarageCond = "Non", PoolQC = "Non", MiscFeature = "Non")
######
data_fg$SaleType<-as.factor(case_when(data_f$SaleType == 'COD' ~ 'COD',
View(data_fg)
x="read"
FirstReverse <- function(str) {
# code goes here
y <- strsplit(str, "")[[1]]
table(strsplit(str, "")[[1]])
reversed_string <- paste(rev(y), collapse="")
return(reversed_string)
}
x="read"
# keep this function call here
print(FirstReverse(x))
y
strsplit(x, "")[[1]]
y<-strsplit(x, "")[[1]]
y
table(y)
y <- strsplit(str, "")[[1]]
paste(rev(y), collapse="")
rev?
paste(rev(y), collapse="")
strsplit(x, "")
[[1]]
y<-strsplit(x, "")[[1]]
y
y<-strsplit(x, "")[[1]]
y
str(y)
strsplit(x, "")
str(strsplit(x, ""))
str(table(y))
options(scipen=999) ###No scientific notifications
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message =  FALSE)
##clean out the space
rm(list=ls())
options(scipen=999)
##What do we need
library(tidyr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(cowplot) # plot different ggplots next to each other
#install.packages("DataExplorer")
library(DataExplorer)
library(corrplot)
library(pscl) # For Pseudo R squareds on GLMS
#Where will we work
#getwd()
setwd("C:/Users/helen/Documents/Kaggle/HousePrice/KaggleHousing")
train<-read.csv("train.csv")
train['Type']<-'train_set'
test<-read.csv("test.csv")
test['SalePrice'] <- NA
test['Type']<-'test_set'
data<-rbind(train,test)
#create_report(train)
#create_report(data)
plot_intro(data)
plot_missing(data)
#Fill in the NA's where they represent 'None Present' with 'Non'
data_f<-data %>%
replace_na(list(Alley = "Non", BsmtQual = "Non", BsmtExposure = "Non",
BsmtCond= "Non", BsmtFinType1="Non", BsmtFinType2="Non",
FireplaceQu = "Non", GarageType = "Non",GarageFinish = "Non",
GarageQual="Non", GarageCond="Non",
PoolQC="Non", Fence = "None", GarageQual="Non",
GarageCond = "Non", PoolQC = "Non", MiscFeature = "Non"))
data_f<-data_f %>%
replace_na(list(GarageYrBlt = 3000))
## Add this bit for another set: LotFrontage = 0, if the above gives a poor result
## Predict the LotFrontage based on total sqft and Configuration of the lot with m.lf
data_ltz<-subset(data_f, is.na(LotFrontage)==FALSE)
m.lf <- glm(LotFrontage~LotArea+LotConfig, Gamma(link="log"), data = data_ltz)
remove(data_ltz)
newdata<-data_f
newdata$LotFrontageHat<- predict(m.lf,newdata,type="response")
iqr<-IQR(newdata$LotFrontage,na.rm=TRUE)
q3<-quantile(newdata$LotFrontage, probs=c(0.75), na.rm=TRUE)
#Cap it
newdata$LotFrontageHat<-case_when(
newdata$LotFrontageHat >= (q3+3*iqr) ~ (q3+3*iqr),
TRUE ~newdata$LotFrontageHat
)
remove(iqr)
remove(q3)
#Impute it
newdata$LotFrontageF<-case_when(
is.na(newdata$LotFrontage)==TRUE ~ round(newdata$LotFrontageHat,0),
TRUE ~newdata$LotFrontage)
newdata$Cat<-case_when(
is.na(newdata$LotFrontage)==TRUE ~ "Impute",
TRUE ~ "Original")
#Add it back to the dataset we are cleaning
data_f$LotFrontage<-newdata$LotFrontageF
data_f$LotFCat<-newdata$Cat
remove(newdata)
#create_report(data_f)
plot_intro(data_f)
plot_missing(data_f)
xx=data_f$BldgType
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point()+
geom_smooth()
#ggplot(data=data_fg, aes(x=xx, y=LotFrontageF))+
#  geom_boxplot()
#plot_missing(data_f[,1:12])
#data_fg<-data_f
data_fg<-data_f[,81:82]
#Resulting factor changes
data_fg$Era<-as.factor(case_when(data_f$MSSubClass == 20 ~ 'Newer',
data_f$MSSubClass == 60 ~ 'Newer',
data_f$MSSubClass == 120 ~ 'Newer',
data_f$MSSubClass == 160 ~ 'Newer',
data_f$MSSubClass == 30 ~ 'Older',
data_f$MSSubClass == 70 ~ 'Older',
TRUE ~ 'NoAgeDifferentiation'  ))
data_fg$MSZoning<-as.factor(case_when(data_f$MSZoning ==  "C (all)"  ~ "C (all)",
data_f$MSZoning =="FV" ~ "FV",
data_f$MSZoning == "RL" ~ "RL/RP",
data_f$MSZoning == "RP" ~ "RL/RP",
TRUE ~'Other'))
data_fg$MSZoning <-fct_reorder(data_fg$MSZoning, data_fg$SalePrice)
data_fg$LotFrontageF<-data_f$LotFrontage
data_fg$LotArea<-data_f$LotArea
data_fg$Street<-as.factor(data_f$Street)
data_fg$Alley<-as.factor(data_f$Alley)
data_fg$LotShape<-as.factor(case_when(data_f$LotShape == "Reg" ~ "Reg",
TRUE ~ "Irreg"))
data_fg$LandContour<- as.factor(case_when(data_f$LandContour == "HLS" ~ "Other",
data_f$LandContour == "Low" ~ "Other",
TRUE ~ data_f$LandContour))
#Discard Utilities
data_fg$LotConfig <- as.factor(data_f$LotConfig)
data_fg$LandSlope<-as.factor(case_when(data_f$LandSlope == "Gtl" ~ "Gtl",
TRUE ~ "Sloped"))
data_fg$Neighborhood <- as.factor(data_f$Neighborhood)
data_fg$Condition1 <- (case_when(
substring(data_f$Condition1,1,3) == "RRN" ~ "RRN",
substring(data_f$Condition1,1,3) == "RRA" ~ "RRA",
TRUE ~ substring(data_f$Condition1,1,3)
)
)
data_fg$Condition2 <- (case_when(
data_f$Condition2 == "Norm" ~ "Nor",
substring(data_f$Condition2,1,3) == "Pos" ~ "Pos",
TRUE ~ "Neg"
)
)
data_fg$ConComb<-data_fg$Condition1 %+%"_"%+% data_fg$Condition2
k<-ncol(data_fg)
colS<-names(data_fg[,(k-2):k])
data_fg[,colS]<-lapply(data_fg[,colS],factor)
remove(k)
remove(colS)
data_fg$BldgType<-as.factor(data_f$BldgType)
str(data_fg)
plot_missing(data_fg)
xx=data_f$HouseStyle
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
xx=data_f$HouseStyle
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point()+
geom_smooth()
#ggplot(data=data_fg, aes(x=xx, y=LotFrontageF))+
#  geom_boxplot()
xx=data_f$OverallQual
yy=data_f$SalePrice
summary(xx)
####DELETE HERE
ggplot(data=data_f, aes(x=xx, y=yy))+
geom_boxplot()
ggplot(data=data_f, aes(x=xx))+
geom_bar()+
geom_text(aes(label = ..count..), stat = "count")
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point(aes(x=xx, y= yy))+
geom_point(aes(x=OverallCond, y= yy))
geom_smooth()
#ggplot(data=data_fg, aes(x=xx, y=LotFrontageF))+
#  geom_boxplot()
ggplot(data = data_f, aes(x=xx, y= yy))+
geom_point(aes(x=xx, y= yy), col= "blue")+
geom_point(aes(x=OverallCond, y= yy), col="red")
